name: Built
run-name: Building
on:
  push:
    branches:
      - master

jobs:

  # run the unit tests before building the image

  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install docker
        run: |
          apt-get update && apt-get install --no-install-recommends -y ca-certificates curl gnupg lsb-release sudo
          curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update && apt-get install --no-install-recommends -y docker-ce docker-ce-cli containerd.io

      - name: Build Image
        run: docker build -t ${{ secrets.IMAGE_NAME}} .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.INSTANCEPATH }}
          username: ${{ vars.USERNAME }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.INSTANCEPATH }}/${{ secrets.IMAGE_NAME }}:latest

  deploy API:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Update and Redeploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.REMOTE_PASS }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            cd containers/test-lab/runner-test
            curl -u ${{ vars.USERNAME }}:${{ secrets.TOKEN }} -O ${{ secrets.DOCKERCOMPOSE_MASTER }}
            echo ${{ secrets.REMOTE_PASS }} | sudo -S docker-compose pull
            echo ${{ secrets.REMOTE_PASS }} | sudo -S docker-compose up -d 
  
  
      
  